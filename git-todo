#!/usr/bin/env bash

# setup color
underline=$(tput sgr 0 1)
bold=$(tput bold)
black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
normal=$(tput sgr0)

get_short_ref_colored() {
	local full_ref=$1

	if [[ "$full_ref" =~ "refs/remotes/" ]]; then
		echo -n "$yellow$(get_short_ref $full_ref)"
	elif [[ "$full_ref" =~ "refs/tags/" ]]; then
		echo -n "$normal$(get_short_ref $full_ref)"
	else
		echo -n "$cyan$(get_short_ref $full_ref)"
	fi
}

get_short_ref() {
	local ref=$1

	ref=${ref#refs/heads/}	#for local refs
	ref=${ref#refs/remotes/}	#for remote refs
	ref=${ref#refs/tags/}	#for tags

	echo $ref
}

get_full_ref() {
	local short=$1

	for full_ref in $all_refs; do
		local shorten=$(get_short_ref $full_ref)

		if [ "$shorten" = "$short" ]; then
			echo $full_ref
			break
		fi
	done
}

init_refs() {
	all_refs=`git show-ref| awk '{print $2}'`

	# get base_ref
	base_ref=`git config todo.base`

	if [ "$base_ref" = "" ]; then
		base_ref='master'
	fi

	base_ref=$(get_full_ref $base_ref)
}

get_distance() {
	local base=$1
	local ref=$2

	local base_mark=""
	if [ "$ref" = "$base" ]; then
		base_mark="[@]"
	fi

	local ahead=`echo $(git rev-list $base...$ref --left-right | grep ">" | wc -l)`
	local behind=`echo $(git rev-list $base...$ref --left-right | grep "<" | wc -l)`

	if [ "$ahead" = "0" ]; then
		ahead=""
	else
		ahead="[+$ahead]"
	fi
	
	if [ "$behind" = "0" ]; then
		behind=""
	else
		behind="[-$behind]"
	fi
	
	echo "$base_mark$ahead$behind"
}

######### refs
#result:
refs=""

# option
my_ref="l"

while getopts rta opt; do
	case $opt in
		r)
			if [ "$my_ref" != "a" ]; then
				my_ref="r"
			fi
			;;
		a) my_ref="a";;
		t) my_ref="t";;
		?) echo "usage: git todo [-rta]";exit 1;;
	esac
done

get_refs() {
	local base_ref=$1

	local ret=""
	for full_ref in $all_refs; do

		has_merge_base=`echo $(git merge-base $base_ref $full_ref | wc -l)`

		if [ "$has_merge_base" = "0" ]; then
			continue # ex) gh_pages
		fi

		case "$my_ref" in
			"l")
				if [[ "$full_ref" =~ "refs/remotes/" ]]; then
					continue
				fi
				if [[ "$full_ref" =~ "refs/tags/" ]]; then
					continue
				fi
				;;
			"r")
				if [[ "$full_ref" =~ "refs/tags/" ]]; then
					continue
				fi
				;;
			"t")
				if [[ "$full_ref" =~ "refs/remotes/" ]]; then
					continue
				fi
				;;
		esac

		if [ "$full_ref" != "$base_ref" ]; then
			ret="$ret $full_ref"
		fi
	done

	## make sure base branch first
	echo "$base_ref $ret"
}

########## checkouted
checkouted_ref=`git symbolic-ref HEAD`
get_checkouted() {
	local full_ref=$1

	checkouted='-'
	if [ "$full_ref" = "$checkouted_ref" ]; then
		checkouted="${green}*${normal}"
	fi

	echo $checkouted
}

######### distance
#result:
max_head_len=0
distance_store=""

distances() {
	local key=$1
	local value=$2

	if [ "$value" != "" ]; then
		distance_store="$distance_store $key:$value"
	else
		for pair in $distance_store; do
			local pair_key=${pair%%:*}
			local pair_value=${pair##*:}

			if [ "$pair_key" = "$key" ]; then
				echo $pair_value
				break
			fi
		done
	fi
}

init_distance(){
	local refs=$1

	for full_ref in $refs; do
		#distance
		distance=$(get_distance $base_ref $full_ref)
		distances $full_ref $distance
	done
}

get_max_head_len() {
	local refs=$1

	for full_ref in $refs; do
		local ref=$(get_short_ref $full_ref)

		local distance=$(distances $full_ref)

		local head="$distance $ref"
		local head_len="${#head}"
		if [ $max_head_len -lt $head_len ]; then
			local max_head_len=$head_len
		fi
	done

	echo $max_head_len
}

main() {

	### init
	init_refs

	local refs=`get_refs $base_ref`

	init_distance "$refs"

	local max_head_len=$(get_max_head_len "$refs")

	### main
	for full_ref in $refs; do
		ref=$(get_short_ref $full_ref)

		#last commit info
		#msg=`git log --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s' -n 1 $ref`
		local msg=`git log --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' -n 1 $full_ref`

		#time=`git log --pretty=format:'%Cgreen(%cr)' -n 1 $full_ref`
		#who=`git log --pretty=format:'%C(bold blue)<%an>%Creset' -n 1 $full_ref`

		distance=$(distances $full_ref)

		#echo padding
		head="$distance $ref"
		head_len=${#head}
		padding_len=$(expr $max_head_len - $head_len)

		#echo
		padding=`printf "%${padding_len}s" ""` #padding
		head_colored="${magenta}$distance $(get_short_ref_colored $full_ref)${normal}"
		echo -e "$padding$head_colored $(get_checkouted $full_ref) $msg $time $who"
	done
}

main "$@"

