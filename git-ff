#!/usr/bin/env bash

# setup color
underline=$(tput sgr 0 1)
bold=$(tput bold)
black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
normal=$(tput sgr0)

usage(){
    echo "git ff [remote]"
}

shas_store=""

shas() {
    local key=$1
    local value=$2

    if [ "$value" != "" ]; then
        shas_store="$shas_store $value:$key"
    else
        for pair in $shas_store; do
            local pair_key=${pair##*:}
            local pair_value=${pair%%:*}

            if [ "$pair_key" = "$key" ]; then
                echo $pair_value
                break
            fi
        done
    fi
}

init(){
    local remote=$1
    local pairs=`git show-ref | grep refs/remotes/$remote`
    local pairs=${pairs// /:}

    for pair in $pairs; do
        shas_store="$shas_store $pair"
    done
}

log(){
    echo "$@"
}

is_force_updated(){
    local full_ref=$1
    local fetched=$(shas $full_ref)

    if [ "$fetched" != "" ]; then
        local forced=`echo $(git rev-list $full_ref..$before_fetched | wc -l)`

        if [ "$forced" != "0" ]; then
            echo "0"
        fi
    fi

    echo "-1";
}

is_mergable() {
    local full_ref=$1
    local full_local_ref=$2

    #check for mergable
    local has_merge_base=`git merge-base $full_ref $full_local_ref >> /dev/null; echo $?`

    echo "$has_merge_base"
}

main() {
    local remote=$1

    if [ "$remote" = "" ]; then
        remote='origin'
    fi

    if [[ -n $(git status -s 2> /dev/null |grep -v ^# |grep -v "working directory clean") ]]; then
        echo "Checkouted branch is dirty!"
        exit 1;
    fi

    init

    git fetch --prune $remote

    local branches=`git show-ref | awk '{print $2}' | grep $remote`

    for full_ref in $branches; do
        local ref=${full_ref#refs/remotes/}
        local local_ref=${full_ref#refs/remotes/$remote/}
        local full_local_ref="refs/heads/$local_ref"
        local head="[pass]"
        local body=""
        local distance=''

        body="$cyan$full_ref$normal"
        #has local branch?
        local has_local_ref=`git show-ref --verify --quiet $full_local_ref; echo $?`

        if [ "$has_local_ref" != "0" ]; then
            body="$body: has no local branch"
            continue;
        elif [ "$(is_force_updated $full_ref)" == "0" ]; then
            head="$red[force-updated]"
        elif [ "$(is_mergable $full_ref $full_local_ref)" == "0" ]; then
            local ahead=`echo $(git rev-list $full_ref..$full_local_ref | wc -l)`
            local behind=`echo $(git rev-list $full_local_ref..$full_ref | wc -l)`

            #Remote branch changed
            distance=": $magenta[+$ahead][-$behind]"

            if [ "$behind" != "0" ]; then
                git checkout $local_ref
                if [ "$ahead" != "0" ]; then
                    head="$red[rebase]"
                    #rebase local changes
                    #git rebase $full_ref
                else
                    head="$yellow[merged]"
                    #fast-forward merge, cos local branch has no changes
                    git merge $full_ref
                fi
            fi
        fi

        echo "[ff]$head$body $distance$normal"
    done
}

main "$@"

